#!/usr/bin/env -S deno run --allow-net --allow-read=. --allow-write=. --allow-import

// Takes a strava.com public activity url and generates a markdown blog post entry from it

import { warn, warnfull, fatal } from 'https://av.prod.archive.org/js/util/log.js'
import dayjs from 'https://esm.ext.archive.org/dayjs@1.11.13'

const URL = Deno.args[0] // eg: https://www.strava.com/activities/8546316583

// extracted imagery resize, (in 2025) defaults to '512x384', so '4' would 4x to '2048x1536'
const IMG_SIZE = 3

const htm = await (async () => {
  try {
    return Deno.readTextFileSync('strava.htm')
  } catch {
    const ret = await (await fetch(URL)).text()
    Deno.writeTextFileSync('strava.htm', ret)
    return ret
  }
})()

// fish out the JSON
const mat = htm.replace(/<\/script>/g, '\n').match(/<script id="__NEXT_DATA__" type="application\/json">(.*)/)
if (!mat) fatal('JSON not found')
// warnfull(mat[1])

const { activity } = JSON.parse(mat[1].replace(/&quot;/g, '"')).props.pageProps
const { media } = activity
delete activity.streams
warnfull(activity)

// eg: ROCK COBBLER 10.0!!   =>   rock-cobbler-10-0
const slug = activity.name.toLowerCase().replace(/[^a-z0-9]/g, '-').replace(/-+/g, '-').replace(/^-+/, '')
  .replace(/-+$/, '')
  .replace('o-m-g', 'omg')

const ymd = dayjs(activity.startLocal).format('YYYY-MM-DD')
const YYYY = ymd.split('-').slice(0, 1)
const MM = ymd.split('-').slice(1, 2)
warnfull({
  media, slug, ymd, YYYY, MM,
})


const DIR = `${YYYY}-${MM}-${slug}`
const FILE = `${DIR}/index.html`
Deno.mkdirSync('img', { recursive: true })
Deno.mkdirSync(DIR,  { recursive: true })

Deno.writeTextFileSync(FILE, `---
title: ${activity.name}
date: ${ymd}
categories:
  - biking
  - pictures
tags:
  - biking
  - gravel bike
  - mountain bike
  - candy
  - phoenix
featured: ${slug}-01.jpg
type: post
---
Description xxx

`)


for (const [n, pix] of Object.entries(media)) {
  warn({ n, pix })

  if (!Object.keys(pix).length) {
    warn('BIG WARNING EMPTY PICTUR INFO!  VIDEO MAYBE??!')
    // eslint-disable-next-line no-continue
    continue
  }

  const n0 = String(n).padStart(2, 0)

  const IMGFI = `img/${slug}-${n0}.jpg`

  Deno.writeTextFileSync(
    FILE,
    `![xxx](/${IMGFI})\n${pix.metadata?.caption ?? ''}\n\n`.replace(/&#39;/g, "'"),
    { append: true },
  )

  const img = pix.imageUrl.replace(
    /(\d+)x(\d+)(\.jpg)$/,
    (overall, ...ary) => `${parseInt(ary[0], 10) * IMG_SIZE}x${parseInt(ary[1], 10) * IMG_SIZE}${ary[2]}`,
  )
  if (img === pix.imageUrl) fatal('unexpected img name')

  try {
    Deno.readFileSync(IMGFI)
  } catch {
    warn(`fetch ${img}`)
    const pixdata = await (await fetch(img)).arrayBuffer()
    Deno.writeFileSync(IMGFI, new Uint8Array(pixdata))
  }
}
